import 'dart:convert';
import 'package:http/http.dart' as http;
import 'dart:io';
import '../models/accounts.dart';
import '../models/Register.dart';
import '../models/Login.dart';
import 'package:shared_preferences/shared_preferences.dart';
class ApiService {
  final String apiUrl = "https://10.0.2.2:7017/api/accounts";

  Future<List<CustomerAccount>> fetchAccounts() async {
    try {
      HttpClient client = HttpClient();
      client.badCertificateCallback = (cert, host, port) => true; // B·ªè qua SSL

      HttpClientRequest request = await client.getUrl(Uri.parse(apiUrl));
      HttpClientResponse response = await request.close();
      String jsonResponse = await response.transform(utf8.decoder).join();

      print("üîπ API Response: $jsonResponse"); // In ra ƒë·ªÉ ki·ªÉm tra JSON
      print("üîπ Status Code: ${response.statusCode}"); // Ki·ªÉm tra status code

      if (response.statusCode == 200) {
        var decodedJson = json.decode(jsonResponse);

        // N·∫øu API tr·∫£ v·ªÅ Map, ki·ªÉm tra c√≥ "$values" kh√¥ng
        if (decodedJson is Map<String, dynamic> && decodedJson.containsKey("\$values")) {
          return (decodedJson["\$values"] as List)
              .map((json) => CustomerAccount.fromJson(json))
              .toList();
        }

        // N·∫øu API tr·∫£ v·ªÅ List, d√πng tr·ª±c ti·∫øp
        if (decodedJson is List) {
          return decodedJson.map((json) => CustomerAccount.fromJson(json)).toList();
        }

        throw Exception("D·ªØ li·ªáu API /accounts kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng mong ƒë·ª£i.");
      } else {
        throw Exception("L·ªói API /accounts: ${response.statusCode} - $jsonResponse");
      }
    } catch (e) {
      throw Exception("L·ªói k·∫øt n·ªëi API /accounts: $e");
    }
  }
  Future<String> login(LoginModel loginModel) async {
    String? validateError = loginModel.validate();
    if (validateError != null) {
      throw Exception(validateError);
    }

    try {
      final response = await http.post(
        Uri.parse('$apiUrl/Login'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(loginModel.toJson()),
      );

      print("Status Code: ${response.statusCode}");
      print("Response Body: ${response.body}");

      final data = jsonDecode(response.body) as Map<String, dynamic>;

      if (response.statusCode == 200) {
        final account = data['account'] as Map<String, dynamic>?;
        if (account == null) {
          throw Exception("Ph·∫£n h·ªìi thi·∫øu th√¥ng tin t√†i kho·∫£n");
        }

        String userEmail = account['email'] as String? ?? '';
        if (userEmail.isEmpty) {
          throw Exception("Email t√†i kho·∫£n kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu");
        }

        // L∆∞u email v√†o SharedPreferences
        SharedPreferences prefs = await SharedPreferences.getInstance();
        await prefs.setString('user_email', userEmail);

        return data['message'] as String? ?? 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng';
      } else {
        String errorMessage = data['message'] as String? ?? 'L·ªói ƒëƒÉng nh·∫≠p kh√¥ng x√°c ƒë·ªãnh';
        throw Exception(errorMessage);
      }
    } on SocketException {
      throw Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra m·∫°ng.");
    } on FormatException {
      throw Exception("D·ªØ li·ªáu ph·∫£n h·ªìi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.");
    } catch (e) {
      throw Exception("L·ªói: $e");
    }
  }
  // ƒêƒÉng k√Ω
  Future<String> register(RegisterModel registerModel) async {
    String? validationError = registerModel.validate();
    if (validationError != null) {
      throw Exception(validationError);
    }

    try {
      final response = await http.post(
        Uri.parse('$apiUrl/Register'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(registerModel.toJson()),
      );

      print("Status Code: ${response.statusCode}");
      print("Response Body: ${response.body}");

      final data = json.decode(response.body);

      if (response.statusCode == 200) {
        return data['message'] ?? 'ƒêƒÉng k√Ω th√†nh c√¥ng';
      } else {
        // N·∫øu API tr·∫£ v·ªÅ l·ªói c√≥ ch·ª©a 'message', l·∫•y th√¥ng b√°o ƒë√≥
        String errorMessage = data.containsKey('message')
            ? data['message']
            : 'L·ªói ƒëƒÉng k√Ω kh√¥ng x√°c ƒë·ªãnh';

        throw Exception(errorMessage);
      }
    } on SocketException {
      print("L·ªói k·∫øt n·ªëi m·∫°ng");
      throw Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra m·∫°ng.");
    } on FormatException {
      print("L·ªói ƒë·ªãnh d·∫°ng JSON");
      throw Exception("D·ªØ li·ªáu ph·∫£n h·ªìi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.");
    } catch (e) {
      print("L·ªói kh√¥ng x√°c ƒë·ªãnh: $e");
      throw Exception(e.toString()); // l·ªói api
    }
  }




  // G·ª≠i OTP
  Future<Map<String, dynamic>> sendOtp(String email) async {
    final response = await http.post(
      Uri.parse('$apiUrl/Send-OTP'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'Email': email}),
    );
    return _handleResponse(response);
  }

  // ƒê·ªïi m·∫≠t kh·∫©u sau khi nh·∫≠p OTP
  Future<Map<String, dynamic>> changePassword(String email, String otp, String newPassword, String confirmPassword) async {
    final response = await http.post(
      Uri.parse('$apiUrl/ChangePassword'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'Email': email,
        'OTP': otp,
        'NewPassword': newPassword,
        'ConfirmPassword': confirmPassword
      }),
    );
    return _handleResponse(response);
  }

// XG
  // X·ª≠ l√Ω ph·∫£n h·ªìi chung
  Map<String, dynamic> _handleResponse(http.Response response) {
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception(json.decode(response.body)['message'] ?? 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
    }
  }

}
